grammar ee.cyber.simplicitas.waebric.WaebricSimpl;

options (backtrack=true;)

lexer-states(site, path, string)

Program: 'module' IdCon Definition+;

option Definition: FunctionDef | Site | Import;

// CC 5:
FunctionDef:
    "def" name=IdCon ("(" (args=IdCon ("," args=IdCon)*)? ")")?
	    statements=Statement*
    EndTerm;

Import: "import" module=ModuleId;
ModuleId: ids=IdCon ("." ids=IdCon)*;

// File Mapping Nodes
Site:
    SiteTerm
        mappings=Mappings?
    EndTerm;
Mappings: mapping=Mapping (Semicolon mapping=Mapping)*;
Mapping: path=Path ":" markup=Markup;

terminal Path
    check-all(site, path)
    exit-state(path)
    : ( PathElement '/' )* PathElement '.' FileExt;
fragment PathElement:( Letter | Digit | '%' )+ ; // '!'..'+' causes java heap exception
fragment FileExt:( Letter | Digit )+ ;

// These must be before IdCon
terminal SiteTerm enter-state(site, path): "site";
terminal EndTerm exit-state(site, path): "end";
terminal CommentTerm enter-state(string): "comment";

terminal PredType: ListType | RecordType | StringType;
fragment ListType: "list";
fragment RecordType: "record";
fragment StringType: "string";

fragment Letter: ('a'..'z'|'A'..'Z');
fragment Digit: ('0'..'9');
fragment Hexadecimal: (Letter | Digit)+;
terminal IdCon: Letter (Letter|Digit|'-')*;
terminal NatCon: Digit+;

Markup: Designator ("(" (args=Argument ("," args=Argument)*)? ")")?;  // cons(call)
Designator: IdCon Attribute*;
option Argument: AttrArg | Expression;

AttrArg: IdCon "=" Expression;

//CC 6:
option Attribute:
    IdAttr
    | ClassAttr
    | NameAttr
    | TypeAttr
    | WidthHeightAttr
    | HeightAttr;

IdAttr: "#" id=IdCon;
ClassAttr: "." cl=IdCon;
NameAttr: '$' name=IdCon;
TypeAttr: ":" t=IdCon;
WidthHeightAttr: "@" width=NatCon "%" height=NatCon;
HeightAttr: "@" height=NatCon;

//CC 6:
option Expression:
    CatExpression
    | ListExpression
    | RecordExpression
    | FieldExpression
    | PrimitiveExpression
    | KeyValuePair;

CatExpression returns Expression {if (right ne null) _self else left}
    : left=FieldExpression ("+" right=Expression)?;
FieldExpression returns Expression {if (right ne null) _self else left}
    : left=PrimitiveExpression ("." right=IdCon)?;

option PrimitiveExpression:
     IdCon
     | SymbolCon
     | NatCon
     | Txt;


ListExpression: "[" (args=Expression ("," args=Expression)*)? "]";
RecordExpression: "{" (args=KeyValuePair ("," args=KeyValuePair)*)? "}";
KeyValuePair: IdCon ":" Expression;

//CC 9:
option Statement:
    IfStatement
    | EachStatement
    | LetStatement
    | BlockStatement
    | CommentStatement
    | EchoStatement
    | CdataStatement
    | YieldStatement
    | MarkupStatement;

IfStatement: "if" "(" Predicate ")" ifStat=Statement ("else" elseStat=Statement)?;

EachStatement: "each" "(" IdCon ":" Expression ")" Statement;
LetStatement: "let" Assignment+ "in" Statement* EndTerm;
option Assignment: VarBinding | FuncBinding;
VarBinding: IdCon "=" Expression Semicolon;
FuncBinding: name=IdCon "(" (args=IdCon ("," args=IdCon)*)? ")" "=" Statement;

BlockStatement: "{" Statement* "}";
CommentStatement: CommentTerm StrCon Semicolon;
option EchoBody:
    Expression | Embedding;
EchoStatement: "echo" EchoBody Semicolon;
CdataStatement: "cdata" Expression Semicolon;
YieldStatement: "yield" Semicolon;
MarkupStatement: Markup MarkupChain;

Predicate: args=PrimPredicate (op=PredicateOp args=PrimPredicate)*;
terminal PredicateOp: AndOp | OrOp;
fragment AndOp: "&&";
fragment OrOp: "||";
option PrimPredicate:
    NotPredicate
    | IsAPredicate;

NotPredicate: "!" PrimPredicate;
IsAPredicate: Expression ("." PredType "?")?;

MarkupExp: expr=Expression Semicolon;
MarkupEmb: embed=Embedding Semicolon;
MarkupSemi: Semicolon;
option MarkupChain: MarkupSemi | MarkupExp | MarkupEmb | Statement;

Embedding: PreText Embed TextTail;

EmbedExp: Markup* Expression;
EmbedMarkup: Markup+;
option Embed: EmbedExp | EmbedMarkup;

TextTailMid: MidText Embed TextTail;
option TextTail: PostText | TextTailMid;

//symbol
terminal SymbolCon: "'" SymbolChar*;
fragment SymbolChar: ~( '\u0000'..'\u001F' | ' ' | ';' | ',' | '>' | '}' | ')');

//Text and TextChar related
fragment TextChar:~('\u0000'..'\u001F' | '&' | '"' | '<' | '\u0080'..'\uFFFF' ) |
 '\n' | '\r' | '\t' | EscQuote | Amp | CharRef | EntRef ;
fragment EscQuote:'\\\\' | '\\"';
fragment Amp:'\&' ~('#' | '0'..'9' | 'a'..'z' | 'A'..'Z' | '_' | ':')+;
fragment CharRef:'&#' Digit+ ';' | '&#x' Hexadecimal ';' ;
fragment EntRef:'&' ( Letter | '_' | ':' ) ( Letter | Digit | '.' | '-' | '_' | ':')* ';' ;
terminal Txt: '"' TextChar* '"';    // Using Text as terminal is not good because of scala.xml.Text

terminal PreText: '"' TextChar* '<';
terminal PostText: '>' TextChar* '"';
terminal MidText: '>' TextChar* '<';

fragment Newline: '\\n';
fragment Tab: '\\t';
fragment Quote: '\\"';
fragment Backslash: '\\\\';
fragment Decimal: '\\\\' 'a:' Digit 'b:' Digit 'c:' Digit;
fragment StrChar: ~('\u0000'..'\u001F' | '"' | '\\') | Newline | Tab | Quote | Backslash | Decimal;
terminal StrCon check-any(string) exit-state(string): '"' StrChar* '"';


terminal Semicolon enter-state(path): ";";

// whitespaces and comments
fragment ML_COMMENT: '/*' (~'*' | '*' ~'/')* '*/';
fragment SL_COMMENT: '//' ~('\n'|'\r')*;
hidden terminal WS: (' '|'\t'|'\r'|'\n'|SL_COMMENT|ML_COMMENT)+;
