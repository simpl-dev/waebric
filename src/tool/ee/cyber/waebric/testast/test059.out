0:79:Program {
  definitions=16:79:Definitions {
    definition=List {
      16:33:FunctionDef {
        arguments=(null)
        endTerm=31:33:EndTerm {
          text="end"
        }
        idCon=20:20:IdCon {
          text="f"
        }
        statements=List {
          24:29:Statement {
            blockStatement=(null)
            cdataStatement=(null)
            commentStatement=(null)
            eachStatement=(null)
            echoStatement=(null)
            ifStatement=(null)
            letStatement=(null)
            markupStatement=(null)
            yieldStatement=24:29:YieldStatement {
              semicolon=29:29:Semicolon {
                text=";"
              }
            }
          }
        }
      }
      36:79:FunctionDef {
        arguments=(null)
        endTerm=77:79:EndTerm {
          text="end"
        }
        idCon=40:43:IdCon {
          text="main"
        }
        statements=List {
          48:75:Statement {
            blockStatement=(null)
            cdataStatement=(null)
            commentStatement=(null)
            eachStatement=48:75:EachStatement {
              expression=57:65:Expression {
                catExpression=(null)
                listExpression=57:65:ListExpression {
                  first=58:58:Expression {
                    catExpression=58:58:CatExpression {
                      left=58:58:FieldExpression {
                        idCon=(null)
                        primitiveExpression=58:58:NatCon {
                          text="1"
                        }
                      }
                      right=(null)
                    }
                    listExpression=(null)
                    recordExpression=(null)
                  }
                  rest=List {
                    60:60:Expression {
                      catExpression=60:60:CatExpression {
                        left=60:60:FieldExpression {
                          idCon=(null)
                          primitiveExpression=60:60:NatCon {
                            text="2"
                          }
                        }
                        right=(null)
                      }
                      listExpression=(null)
                      recordExpression=(null)
                    }
                    62:62:Expression {
                      catExpression=62:62:CatExpression {
                        left=62:62:FieldExpression {
                          idCon=(null)
                          primitiveExpression=62:62:NatCon {
                            text="3"
                          }
                        }
                        right=(null)
                      }
                      listExpression=(null)
                      recordExpression=(null)
                    }
                    64:64:Expression {
                      catExpression=64:64:CatExpression {
                        left=64:64:FieldExpression {
                          idCon=(null)
                          primitiveExpression=64:64:NatCon {
                            text="4"
                          }
                        }
                        right=(null)
                      }
                      listExpression=(null)
                      recordExpression=(null)
                    }
                  }
                }
                recordExpression=(null)
              }
              idCon=54:54:IdCon {
                text="x"
              }
              statement=72:75:Statement {
                blockStatement=(null)
                cdataStatement=(null)
                commentStatement=(null)
                eachStatement=(null)
                echoStatement=(null)
                ifStatement=(null)
                letStatement=(null)
                markupStatement=72:75:MarkupStatement {
                  markup=72:72:Markup {
                    arguments=(null)
                    designator=72:72:Designator {
                      attribute=List {
                      }
                      idCon=72:72:IdCon {
                        text="f"
                      }
                    }
                  }
                  markupChain=74:75:MarkupChain {
                    embedding=(null)
                    expression=74:74:Expression {
                      catExpression=74:74:CatExpression {
                        left=74:74:FieldExpression {
                          idCon=(null)
                          primitiveExpression=74:74:IdCon {
                            text="x"
                          }
                        }
                        right=(null)
                      }
                      listExpression=(null)
                      recordExpression=(null)
                    }
                    semicolon=75:75:Semicolon {
                      text=";"
                    }
                    statement=(null)
                  }
                }
                yieldStatement=(null)
              }
            }
            echoStatement=(null)
            ifStatement=(null)
            letStatement=(null)
            markupStatement=(null)
            yieldStatement=(null)
          }
        }
      }
    }
  }
  idCon=7:13:IdCon {
    text="test059"
  }
}
RAW:
Program(IdCon(test059),Definitions(List(FunctionDef(IdCon(f),null,List(Statement(null,null,null,null,null,null,null,YieldStatement(Semicolon(;)),null)),EndTerm(end)), FunctionDef(IdCon(main),null,List(Statement(null,EachStatement(IdCon(x),Expression(null,ListExpression(Expression(CatExpression(FieldExpression(NatCon(1),null),null),null,null),List(Expression(CatExpression(FieldExpression(NatCon(2),null),null),null,null), Expression(CatExpression(FieldExpression(NatCon(3),null),null),null,null), Expression(CatExpression(FieldExpression(NatCon(4),null),null),null,null))),null),Statement(null,null,null,null,null,null,null,null,MarkupStatement(Markup(Designator(IdCon(f),List()),null),MarkupChain(Semicolon(;),Expression(CatExpression(FieldExpression(IdCon(x),null),null),null,null),null,null)))),null,null,null,null,null,null,null)),EndTerm(end)))))