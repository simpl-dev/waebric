0:103:Program {
  definitions=16:103:Definitions {
    definition=List {
      16:48:FunctionDef {
        arguments=(null)
        endTerm=46:48:EndTerm {
          text="end"
        }
        idCon=20:23:IdCon {
          text="main"
        }
        statements=List {
          27:44:Statement {
            blockStatement=(null)
            cdataStatement=(null)
            commentStatement=(null)
            eachStatement=(null)
            echoStatement=(null)
            ifStatement=(null)
            letStatement=(null)
            markupStatement=27:44:MarkupStatement {
              markup=27:43:Markup {
                arguments=28:43:Arguments {
                  first=29:42:Expression {
                    catExpression=29:42:CatExpression {
                      left=29:42:FieldExpression {
                        idCon=(null)
                        primitiveExpression=29:42:Text {
                          text=""Hello world!""
                        }
                      }
                      right=(null)
                    }
                    listExpression=(null)
                    recordExpression=(null)
                  }
                  rest=List {
                  }
                }
                designator=27:27:Designator {
                  attribute=List {
                  }
                  idCon=27:27:IdCon {
                    text="f"
                  }
                }
              }
              markupChain=44:44:MarkupChain {
                embedding=(null)
                expression=(null)
                semicolon=44:44:Semicolon {
                  text=";"
                }
                statement=(null)
              }
            }
            yieldStatement=(null)
          }
        }
      }
      51:70:FunctionDef {
        arguments=57:57:Formals {
          left=57:57:IdCon {
            text="x"
          }
          rest=List {
          }
        }
        endTerm=68:70:EndTerm {
          text="end"
        }
        idCon=55:55:IdCon {
          text="f"
        }
        statements=List {
          62:66:Statement {
            blockStatement=(null)
            cdataStatement=(null)
            commentStatement=(null)
            eachStatement=(null)
            echoStatement=(null)
            ifStatement=(null)
            letStatement=(null)
            markupStatement=62:66:MarkupStatement {
              markup=62:65:Markup {
                arguments=63:65:Arguments {
                  first=64:64:Expression {
                    catExpression=64:64:CatExpression {
                      left=64:64:FieldExpression {
                        idCon=(null)
                        primitiveExpression=64:64:IdCon {
                          text="x"
                        }
                      }
                      right=(null)
                    }
                    listExpression=(null)
                    recordExpression=(null)
                  }
                  rest=List {
                  }
                }
                designator=62:62:Designator {
                  attribute=List {
                  }
                  idCon=62:62:IdCon {
                    text="g"
                  }
                }
              }
              markupChain=66:66:MarkupChain {
                embedding=(null)
                expression=(null)
                semicolon=66:66:Semicolon {
                  text=";"
                }
                statement=(null)
              }
            }
            yieldStatement=(null)
          }
        }
      }
      73:103:FunctionDef {
        arguments=79:79:Formals {
          left=79:79:IdCon {
            text="x"
          }
          rest=List {
          }
        }
        endTerm=101:103:EndTerm {
          text="end"
        }
        idCon=77:77:IdCon {
          text="g"
        }
        statements=List {
          84:99:Statement {
            blockStatement=(null)
            cdataStatement=(null)
            commentStatement=(null)
            eachStatement=(null)
            echoStatement=84:99:EchoStatement {
              embedding=(null)
              expression=89:98:Expression {
                catExpression=89:98:CatExpression {
                  left=89:94:FieldExpression {
                    idCon=(null)
                    primitiveExpression=89:94:Text {
                      text=""x = ""
                    }
                  }
                  right=98:98:Expression {
                    catExpression=98:98:CatExpression {
                      left=98:98:FieldExpression {
                        idCon=(null)
                        primitiveExpression=98:98:IdCon {
                          text="x"
                        }
                      }
                      right=(null)
                    }
                    listExpression=(null)
                    recordExpression=(null)
                  }
                }
                listExpression=(null)
                recordExpression=(null)
              }
              semicolon=99:99:Semicolon {
                text=";"
              }
            }
            ifStatement=(null)
            letStatement=(null)
            markupStatement=(null)
            yieldStatement=(null)
          }
        }
      }
    }
  }
  idCon=7:13:IdCon {
    text="test043"
  }
}
RAW:
Program(IdCon(test043),Definitions(List(FunctionDef(IdCon(main),null,List(Statement(null,null,null,null,null,null,null,null,MarkupStatement(Markup(Designator(IdCon(f),List()),Arguments(Expression(CatExpression(FieldExpression(Text("Hello world!"),null),null),null,null),List())),MarkupChain(Semicolon(;),null,null,null)))),EndTerm(end)), FunctionDef(IdCon(f),Formals(IdCon(x),List()),List(Statement(null,null,null,null,null,null,null,null,MarkupStatement(Markup(Designator(IdCon(g),List()),Arguments(Expression(CatExpression(FieldExpression(IdCon(x),null),null),null,null),List())),MarkupChain(Semicolon(;),null,null,null)))),EndTerm(end)), FunctionDef(IdCon(g),Formals(IdCon(x),List()),List(Statement(null,null,null,null,null,EchoStatement(Expression(CatExpression(FieldExpression(Text("x = "),null),Expression(CatExpression(FieldExpression(IdCon(x),null),null),null,null)),null,null),null,Semicolon(;)),null,null,null)),EndTerm(end)))))