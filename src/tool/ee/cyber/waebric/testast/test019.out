0:95:Program {
  definitions=16:95:Definitions {
    definition=List {
      16:95:FunctionDef {
        arguments=(null)
        endTerm=93:95:EndTerm {
          text="end"
        }
        idCon=20:23:IdCon {
          text="main"
        }
        statements=List {
          27:91:Statement {
            blockStatement=(null)
            cdataStatement=(null)
            commentStatement=(null)
            eachStatement=(null)
            echoStatement=(null)
            ifStatement=(null)
            letStatement=27:91:LetStatement {
              assignment=List {
                36:48:Assignment {
                  funcBinding=(null)
                  varBinding=36:48:VarBinding {
                    expression=40:47:Expression {
                      catExpression=40:47:CatExpression {
                        left=40:47:FieldExpression {
                          idCon=(null)
                          primitiveExpression=40:47:Text {
                            text=""no way""
                          }
                        }
                        right=(null)
                      }
                      listExpression=(null)
                      recordExpression=(null)
                    }
                    idCon=36:36:IdCon {
                      text="x"
                    }
                    semicolon=48:48:Semicolon {
                      text=";"
                    }
                  }
                }
                54:67:Assignment {
                  funcBinding=54:67:FuncBinding {
                    first=56:56:IdCon {
                      text="x"
                    }
                    func=54:54:IdCon {
                      text="f"
                    }
                    rest=List {
                    }
                    statement=61:67:Statement {
                      blockStatement=(null)
                      cdataStatement=(null)
                      commentStatement=(null)
                      eachStatement=(null)
                      echoStatement=61:67:EchoStatement {
                        embedding=(null)
                        expression=66:66:Expression {
                          catExpression=66:66:CatExpression {
                            left=66:66:FieldExpression {
                              idCon=(null)
                              primitiveExpression=66:66:IdCon {
                                text="x"
                              }
                            }
                            right=(null)
                          }
                          listExpression=(null)
                          recordExpression=(null)
                        }
                        semicolon=67:67:Semicolon {
                          text=";"
                        }
                      }
                      ifStatement=(null)
                      letStatement=(null)
                      markupStatement=(null)
                      yieldStatement=(null)
                    }
                  }
                  varBinding=(null)
                }
              }
              endTerm=89:91:EndTerm {
                text="end"
              }
              statement=List {
                75:85:Statement {
                  blockStatement=(null)
                  cdataStatement=(null)
                  commentStatement=(null)
                  eachStatement=(null)
                  echoStatement=(null)
                  ifStatement=(null)
                  letStatement=(null)
                  markupStatement=75:85:MarkupStatement {
                    markup=75:84:Markup {
                      arguments=76:84:Arguments {
                        first=77:83:Expression {
                          catExpression=77:83:CatExpression {
                            left=77:83:FieldExpression {
                              idCon=(null)
                              primitiveExpression=77:83:Text {
                                text=""Hello""
                              }
                            }
                            right=(null)
                          }
                          listExpression=(null)
                          recordExpression=(null)
                        }
                        rest=List {
                        }
                      }
                      designator=75:75:Designator {
                        attribute=List {
                        }
                        idCon=75:75:IdCon {
                          text="f"
                        }
                      }
                    }
                    markupChain=85:85:MarkupChain {
                      embedding=(null)
                      expression=(null)
                      semicolon=85:85:Semicolon {
                        text=";"
                      }
                      statement=(null)
                    }
                  }
                  yieldStatement=(null)
                }
              }
            }
            markupStatement=(null)
            yieldStatement=(null)
          }
        }
      }
    }
  }
  idCon=7:13:IdCon {
    text="test019"
  }
}
RAW:
Program(IdCon(test019),Definitions(List(FunctionDef(IdCon(main),null,List(Statement(null,null,LetStatement(List(Assignment(VarBinding(IdCon(x),Expression(CatExpression(FieldExpression(Text("no way"),null),null),null,null),Semicolon(;)),null), Assignment(null,FuncBinding(IdCon(f),IdCon(x),List(),Statement(null,null,null,null,null,EchoStatement(Expression(CatExpression(FieldExpression(IdCon(x),null),null),null,null),null,Semicolon(;)),null,null,null)))),List(Statement(null,null,null,null,null,null,null,null,MarkupStatement(Markup(Designator(IdCon(f),List()),Arguments(Expression(CatExpression(FieldExpression(Text("Hello"),null),null),null,null),List())),MarkupChain(Semicolon(;),null,null,null)))),EndTerm(end)),null,null,null,null,null,null)),EndTerm(end)))))