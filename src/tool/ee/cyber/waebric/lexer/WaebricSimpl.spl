grammar ee.cyber.waebric.lexer.WaebricSimpl;

options (backtrack=true;)

scalaheader {
 import HelperMethods._
}

lexer-states(site, path, string)

Program: 'module' IdCon Definitions;

Definitions: Definition+;

option Definition: FunctionDef | Site | Import;

option FunctionHeader: FunctionName | Function;

FunctionDef:
    //"def" IdCon ("(" arguments=Formals? ")")?
    Function
	    statements=Statement*
    EndTerm;

FunctionName: "def" IdCon;
FunctionArgs: "(" arguments=Formals? ")";
Function returns FunctionHeader { if (args ne null) _self else name }
    : name=FunctionName (args=FunctionArgs)?;
Formals: left=IdCon ("," rest=IdCon)*;


Import: "import" module=ModuleId;
ModuleId: first=IdCon ("." rest=IdCon)*;

// File Mapping Nodes
Site:
    SiteTerm
        mappings=Mappings? 
    EndTerm;
Mappings: first=Mapping (Semicolon rest=Mapping)*;
Mapping: path=Path ":" markup=Markup;

terminal Path 
    check-all(site, path) 
    exit-state(path)
    : ( PathElement '/' )* PathElement '.' FileExt; 
fragment PathElement:( Letter | Digit | '%' )+ ; // '!'..'+' causes java heap exception
fragment FileExt:( Letter | Digit )+ ;

// These must be before IdCon
terminal SiteTerm enter-state(site, path): "site";
terminal EndTerm exit-state(site, path): "end";
terminal CommentTerm enter-state(string): "comment";

terminal PredType: ListType | RecordType | StringType;
fragment ListType: "list";
fragment RecordType: "record";
fragment StringType: "string";


// General
fragment Letter: ('a'..'z'|'A'..'Z');
fragment Digit: ('0'..'9');
fragment Hexadecimal: (Letter | Digit)+;
terminal IdCon: Letter (Letter|Digit|'-')*;
terminal NatCon: Digit+;

Markup: Designator MarkupArguments?;  // cons(call)
Designator: IdCon Attribute*;
Arguments returns MarkupArguments {
        if ((rest ne null) && !rest.isEmpty) _self else if (first ne null) first else _self}
    : "(" (first=Argument ("," rest=Argument)*)? ")";
ArgumentRest: ("," rest=Argument)*;
option Argument: AttrArg | Expression;
option MarkupArguments: Argument | Arguments;


AttrArg: IdCon "=" Expression;

option Attribute:
    IdAttr
    | ClassAttr
    | NameAttr 
    | TypeAttr 
    | WidthHeightAttr 
    | HeightAttr;

IdAttr: "#" id=IdCon;
ClassAttr: "." cl=IdCon;
NameAttr: '$' name=IdCon;
TypeAttr: ":" t=IdCon;
WidthHeightAttr: "@" width=NatCon "%" height=NatCon;
HeightAttr: "@" height=NatCon;

option Expression:
    CatExpression
    | ListExpression
    | RecordExpression
    | FieldExpression
    | PrimitiveExpression
    | KeyValuePair;

CatExpression returns Expression {if (right ne null) _self else left}
    : left=FieldExpression ("+" right=Expression)?;
FieldExpression returns Expression {if (right ne null) _self else left}
    : left=PrimitiveExpression ("." right=IdCon)?;

option PrimitiveExpression:
     IdCon
     | SymbolCon
     | NatCon 
     | Text;


ListExpression returns Expression {
        if ((rest ne null) && !rest.isEmpty) _self else if (first ne null) first else _self}
    : "[" (first=Expression ("," rest=Expression)*)? "]";
RecordExpression returns Expression {
        if ((rest ne null) && !rest.isEmpty) _self else if (first ne null) first else _self}
    : "{" (first=KeyValuePair ("," rest=KeyValuePair)*)? "}";
KeyValuePair returns Expression: IdCon ":" Expression;


option Statement:
    IfStatement
    //IfElseStatement
    | EachStatement
    | LetStatement
    | BlockStatement
    | CommentStatement
    | EchoStatement
    | CdataStatement
    | YieldStatement
    | MarkupStatement;

IfStatement: "if" "(" Predicate ")" ifStat=Statement ("else" elseStat=Statement)?;
/* Does not work for some reason..
option IfElseStatement: OnlyIf | IfElse;
OnlyIf: "if" "(" Predicate ")" ifStat=Statement;
OnlyElse: "else" elseStat=Statement;
IfElse returns IfElseStatement {if (ee ne null) _self else ii}: ii=OnlyIf (ee=OnlyElse)?; */

EachStatement: "each" "(" IdCon ":" Expression ")" Statement;
LetStatement: "let" Assignment+ "in" Statement* EndTerm;
option Assignment: VarBinding | FuncBinding;
VarBinding: IdCon "=" Expression Semicolon;
FuncBinding: func=IdCon "(" FuncArguments? ")" "=" Statement;

FuncArg returns FuncArguments {if ((rest ne null) && !rest.isEmpty) _self else first}
    : (first=IdCon ("," rest=IdCon)*);
option FuncArguments: IdCon | FuncArg;

BlockStatement: "{" Statement* "}";
CommentStatement: CommentTerm StrCon Semicolon;
option EchoBody:
    Expression | Embedding;
EchoStatement: "echo" EchoBody Semicolon;
CdataStatement: "cdata" Expression Semicolon; 
YieldStatement: "yield" Semicolon;
MarkupStatement: Markup MarkupChain;

Predicate: left=PrimPredicate (op=PredicateOp rest=PrimPredicate)*;
terminal PredicateOp: AndOp | OrOp;
fragment AndOp: "&&";
fragment OrOp: "||";
option PrimPredicate:
    NotPredicate
    | IsAPredicate;

NotPredicate: "!" PrimPredicate;
// TODO: just Expression should be converted to ExprPredicate or something. ? WHY
// ExpPredicate: ListExpression | RecordExpression | PrimitiveExpression;
IsAPredicate: Expression ("." PredType "?")?;

MarkupExp: Expression Semicolon;
MarkupEmb: Embedding Semicolon;
MarkupSemi: Semicolon;
//MarkupChain: Semicolon | Expression Semicolon | Embedding Semicolon | Statement;
option MarkupChain: MarkupSemi | MarkupExp | MarkupEmb | Statement;

Embedding: PreText Embed TextTail;

EmbedExp: Markup* Expression;
EmbedMarkup: Markup+;
//Embed: Markup* Expression | Markup+;
option Embed: EmbedExp | EmbedMarkup;

//TextTail: PostText | MidText Embed TextTail;
TextTailMid: MidText Embed TextTail;
option TextTail: PostText | TextTailMid;

//symbol
terminal SymbolCon: "'" SymbolChar*;
fragment SymbolChar: ~( '\u0000'..'\u001F' | ' ' | ';' | ',' | '>' | '}' | ')');

//Text and TextChar related
fragment TextChar:~('\u0000'..'\u001F' | '&' | '"' | '<' | '\u0080'..'\uFFFF' ) |
 '\n' | '\r' | '\t' | EscQuote | Amp | CharRef | EntRef ;
fragment EscQuote:'\\\\' | '\\"';
fragment Amp:'\&' ~('#' | '0'..'9' | 'a'..'z' | 'A'..'Z' | '_' | ':')+;
fragment CharRef:'&#' Digit+ ';' | '&#x' Hexadecimal ';' ;
fragment EntRef:'&' ( Letter | '_' | ':' ) ( Letter | Digit | '.' | '-' | '_' | ':')* ';' ;
// TODO: add check that this terminal must not be matched when lexer
// state contains string.
terminal Text: '"' TextChar* '"';

terminal PreText: '"' TextChar* '<';
terminal PostText: '>' TextChar* '"';
terminal MidText: '>' TextChar* '<';

//StrCon and StrChar
//As this will be processed after Text, all patterns that match
//both, were already considered as Text. "comment" tag only
//uses StrCon and this must be considered.

fragment Newline: '\\n';
fragment Tab: '\\t';
fragment Quote: '\\"';
fragment Backslash: '\\\\';
fragment Decimal: '\\\\' 'a:' Digit 'b:' Digit 'c:' Digit;
fragment StrChar: ~('\u0000'..'\u001F' | '"' | '\\') | Newline | Tab | Quote | Backslash | Decimal;
terminal StrCon check-any(string) exit-state(string): '"' StrChar* '"';


terminal Semicolon enter-state(path): ";";

// whitespaces and comments
fragment ML_COMMENT: '/*' (~'*' | '*' ~'/')* '*/';
fragment SL_COMMENT: '//' ~('\n'|'\r')*;
hidden terminal WS: (' '|'\t'|'\r'|'\n'|SL_COMMENT|ML_COMMENT)+;
